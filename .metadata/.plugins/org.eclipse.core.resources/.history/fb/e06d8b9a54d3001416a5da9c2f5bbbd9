package main;
import launcher.Launcher;
import odometer.Odometer;
import odometer.OdometerCorrection;
import data.DataCenter;
import drivers.CSPoller;
import drivers.HWConstants;
import drivers.Navigation;
import drivers.USPoller;
import util.Point;
import util.Util;
import lejos.nxt.Button;
import lejos.nxt.Sound;
import localization.CSLocalizer;
import localization.USLocalizer;

/**
 * The main class. Initializes the threads of execution
 * and starts them.
 * 
 * @author Andrei Purcarus
 * @author Leotard Niyonkuru
 */
public class USL {

	/**
	 * Main thread of execution of the robot. Starts all other threads.
	 */
	public static void main(String [] args) {
		//Wait for a button to start.
		int buttonChoice = Button.waitForAnyPress();
		switch (buttonChoice) {
		case Button.ID_ENTER: case Button.ID_LEFT: case Button.ID_RIGHT:
			break;
		case Button.ID_ESCAPE:
			return;
		default:
			throw new RuntimeException("Impossible button press.");
		}
		
		//Initializes the threads.
		final DataCenter dc = new DataCenter();
		final Odometer odo = new Odometer(dc);
		final Navigation nav = new Navigation(dc);
		final USPoller usFront = new USPoller(90, dc);
		final USLocalizer usl = new USLocalizer(dc, nav);

		//Starts the threads.
		odo.start();
		usFront.start();

		(new Thread() {
			public void run() {
				usl.doLocalization();
				nav.travelTo(new Point(0, 0), false);
				nav.turnTo(90);
				System.exit(0);
			}
		}).start();
		
		//Wait for another button press to exit.
		Button.waitForAnyPress();
		System.exit(0);
	}
	
	/**
	 * Converts a coordinate in the field to cm.
	 */
	private static double convert(double x) {
		return x * HWConstants.TILE_DISTANCE;
	}
	
	/**
	 * Positions itself to fire at the target using the navigation.
	 * The reference point serves to narrow down the possibilities of 
	 * where to go, and the robot will position itelf on the line joining 
	 * target and reference.
	 */
	private static void turnToLaunch(Point reference, Point target, Navigation nav) {
		double angle = Math.atan2(target.y - reference.y, target.x - reference.x);
		double xx = HWConstants.LAUNCH_DISTANCE * Math.cos(angle);
		double yy = HWConstants.LAUNCH_DISTANCE * Math.sin(angle);
		Point launch_pos = new Point(target.x - xx, target.y - yy);
		nav.travelTo(launch_pos, false);
		nav.turnTo(Util.toRange(Math.toDegrees(angle) - HWConstants.LAUNCH_ANGLE, 0.0, false));
	}
}
